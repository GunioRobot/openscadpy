h1. OpenSCADpy

By Henning Meyer, Marius Kintel and Clifford Wolf

h2. What is OpenSCADpy?

OpenSCADPy is a fork of OpenSCAD, a software for creating solid 3D CAD objects. OpenSCADPy uses Python instead of OpenSCADs intrinsic language to model objects. It is free software and available for Linux/UNIX, MS Windows and Mac OS X.

Unlike most free software for creating 3D models (such as the famous application Blender) it does not focus on the artistic aspects of 3D modelling but instead on the CAD aspects. Thus it might be the application you are looking for when you are planning to create 3D models of machine parts but pretty sure is not what you are looking for when you are more interested in creating computer-animated movies.

OpenSCADpy is not an interactive modeller. Instead it is something like a 3D-compiler that reads in a script file that describes the object and renders the 3D model from this script file (see examples below). This gives you (the designer) full control over the modelling process and enables you to easily change any step in the modelling process or make designs that are defined by configurable parameters.

OpenSCADpy provides two main modelling techniques: First there is constructive solid geometry (aka CSG) and second there is extrusion of 2D outlines. As data exchange format format for this 2D outlines Autocad DXF files are used. In addition to 2D paths for extrusion it is also possible to read design parametes from DXF files. Besides DXF files OpenSCAD can read and create 3D models in the STL and OFF file formats.

h2. Getting OpenSCADpy

h3. Ubuntu Linux (Natty, Maverick)

Piece of cake:
<pre><code>
sudo apt-add-repository ppa:hmeyer/openscadpy
sudo apt-get update
sudo apt-get install openscadpy
</code></pre>

h3. All other systems

As there are no binaries available for your system, you have to build them yourself. We are currently working on installers for MS Win and maybe even MacOS. As debian packages are available for Ubuntu, it should be easy to produce deb's for Debian and RPMs (via Alien?) for Fedora. Please contact the maintainer if you need packages for your platform or if you can provide help building these.

h4. Prerequisites

To build OpenSCADpy, you need some libraries and tools. The version numbers in brackets specify the versions which have been used for development. Other versions may or may not work as well..

* Qt4 (4.4 - 4.7):
  http://www.qtsoftware.com/

* CGAL (3.5 - 3.7):
  http://www.cgal.org/

* GMP (5.0.x):
  http://www.gmplib.org/

* boost (at least 1.41.0, required by CGAL and Python binding)
  http://www.boost.org/

* OpenCSG (1.3.0):
  http://www.opencsg.org/

* GLEW (1.5.x, also bundled with OpenCSG)
  http://glew.sourceforge.net/

* Eigen2 (2.0.11)
  http://eigen.tuxfamily.org/

* GCC C++ Compiler (>=4.2)
  http://gcc.gnu.org/

* Python (2.6|2.7)


h4. building OpenSCADpy

First, run @qmake-qt4@ to generate a Makefile. On some systems you need to
run @qmake4@, @qmake@ or something alike to run the qt4 version of the tool.

Then run @make@. Finally you might run @make install@ as root or simply copy the
@openscadpy@ binary (OpenSCADpy.app on Mac OS X) to the bin directory of your choice.


h2. Documentation
As OpenSCADpy is forked from OpenSCAD, you might want to look at the "OpenSCAD Homepage":http://openscad.org/ for documentation.

h3. Reference
All objects are defined in Python language. All OpenSCAD specific methods are part of the openscad-module - so most likely you want to import this module to the global namespace: @from openscad import *@.
When all your code is executed OpenSCADpy will render the content of the variable @openscad.result@. 
@openscad.result = openscad.sphere(10)@ would create a sphere (with r=10).

The following is a list of all object classes in OpenSCADpy.

h4. Primitives

* Sphere
@sphere(r=_radius_)


